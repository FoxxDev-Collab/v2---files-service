This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-14T04:15:16.811Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
.trunk/.gitignore
.trunk/configs/.hadolint.yaml
.trunk/configs/.markdownlint.yaml
.trunk/configs/.yamllint.yaml
.trunk/trunk.yaml
client/app/_tests_/client.test.js
client/app/.dockerignore
client/app/.eslintrc.json
client/app/.gitignore
client/app/Dockerfile
client/app/next.config.js
client/app/package-lock.json
client/app/package.json
client/app/postcss.config.mjs
client/app/README.md
client/app/src/components/DashboardButton.tsx
client/app/src/components/Header.tsx
client/app/src/components/Layout.tsx
client/app/src/components/LogoutButton.tsx
client/app/src/components/ProtectedRoute.tsx
client/app/src/contexts/AuthContext.tsx
client/app/src/pages/_app.tsx
client/app/src/pages/admin/users.tsx
client/app/src/pages/dashboard.tsx
client/app/src/pages/index.tsx
client/app/src/pages/profile.tsx
client/app/src/pages/register.tsx
client/app/src/pages/settings.tsx
client/app/src/styles/globals.css
client/app/src/styles/page.tsx
client/app/src/utils/api.ts
client/app/src/utils/auth.ts
client/app/tailwind.config.ts
client/app/tsconfig.json
docker-compose.yml
Dockerfile
gateway/dist/index.js
gateway/Dockerfile
gateway/package-lock.json
gateway/package.json
gateway/src/index.ts
gateway/structure.txt
gateway/tsconfig.json
init.sql
notes.txt
package.json
README.md
services/auth/check-permissions.js
services/auth/database.json
services/auth/db.ts
services/auth/dist/auth.js
services/auth/dist/db.js
services/auth/dist/routes/auth.js
services/auth/dist/server.js
services/auth/Dockerfile
services/auth/manual-migration.js
services/auth/migrations/20240311120000_add_profile_picture_url.sql
services/auth/package-lock.json
services/auth/package.json
services/auth/run-migration.js
services/auth/src/auth.ts
services/auth/src/routes/auth.ts
services/auth/src/server.ts
services/auth/test-db-connection.js
services/auth/tsconfig.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
node_modules
.env
.next
*.log

================
File: .trunk/.gitignore
================
*out
*logs
*actions
*notifications
*tools
plugins
user_trunk.yaml
user.yaml
tmp

================
File: .trunk/configs/.hadolint.yaml
================
# Following source doesn't work in most setups
ignored:
  - SC1090
  - SC1091

================
File: .trunk/configs/.markdownlint.yaml
================
# Prettier friendly markdownlint config (all formatting rules disabled)
extends: markdownlint/style/prettier

================
File: .trunk/configs/.yamllint.yaml
================
rules:
  quoted-strings:
    required: only-when-needed
    extra-allowed: ["{|}"]
  key-duplicates: {}
  octal-values:
    forbid-implicit-octal: true

================
File: .trunk/trunk.yaml
================
# This file controls the behavior of Trunk: https://docs.trunk.io/cli
# To learn more about the format of this file, see https://docs.trunk.io/reference/trunk-yaml
version: 0.1
cli:
  version: 1.22.5
# Trunk provides extensibility via plugins. (https://docs.trunk.io/plugins)
plugins:
  sources:
    - id: trunk
      ref: v1.6.2
      uri: https://github.com/trunk-io/plugins
# Many linters and tools depend on runtimes - configure them here. (https://docs.trunk.io/runtimes)
runtimes:
  enabled:
    - node@18.12.1
    - python@3.10.8
# This is the section where you manage your linters. (https://docs.trunk.io/check/configuration)
lint:
  disabled:
    - git-diff-check
    - prettier
  enabled:
    - checkov@3.2.250
    - hadolint@2.12.0
    - markdownlint@0.41.0
    - osv-scanner@1.8.4
    - trufflehog@3.81.10
    - yamllint@1.35.1

================
File: client/app/_tests_/client.test.js
================
// services/auth/__tests__/auth.test.js

describe('Auth Service', () => {
    test('placeholder test', () => {
      expect(true).toBe(true);
    });
  });

================
File: client/app/.dockerignore
================
node_modules
.next

================
File: client/app/.eslintrc.json
================
{
  "extends": ["next/core-web-vitals"],
  "parser": "@babel/eslint-parser",
  "parserOptions": {
    "requireConfigFile": false,
    "babelOptions": {
      "presets": ["next/babel"]
    }
  }
}

================
File: client/app/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: client/app/Dockerfile
================
FROM node:20

WORKDIR /usr/src/app

# Copy package.json and package-lock.json
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the client code
COPY . .

# Build the Next.js app
RUN npm run build

# Expose the port the app runs on
EXPOSE 3000

# Command to run the application
CMD ["npm", "start"]

================
File: client/app/next.config.js
================
/** @type {import('next').NextConfig} */
const nextConfig = {
    reactStrictMode: true,
  };

  module.exports = nextConfig;

================
File: client/app/package.json
================
{
  "name": "new-cloud-client",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch"
  },
  "engines": {
    "node": "20.17.0"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.5",
    "@nextui-org/card": "^2.0.33",
    "@nextui-org/system": "^2.2.5",
    "@nextui-org/theme": "^2.2.9",
    "@tanstack/react-query": "^4.29.5",
    "axios": "^1.7.7",
    "babel": "^7.25.0",
    "framer-motion": "^11.5.4",
    "new-cloud-client": "file:",
    "next": "^14.2.8",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@babel/eslint-parser": "^7.22.5",
    "@babel/preset-env": "^7.22.5",
    "@babel/preset-react": "^7.22.5",
    "@babel/preset-typescript": "^7.22.5",
    "@testing-library/jest-dom": "^6.5.0",
    "@testing-library/react": "^14.0.0",
    "@types/babel__core": "^7.20.5",
    "@types/babel__generator": "^7.6.8",
    "@types/babel__template": "^7.4.4",
    "@types/babel__traverse": "^7.20.6",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/json-schema": "^7.0.15",
    "@types/jsonwebtoken": "^9.0.6",
    "@types/node": "^22.5.4",
    "@types/react": "^18.2.6",
    "@types/react-dom": "^18.2.4",
    "autoprefixer": "^10.4.14",
    "babel": "^6.23.0",
    "eslint": "^8.40.0",
    "eslint-config-next": "^14.2.8",
    "jest": "^29.5.0",
    "postcss": "^8.4.23",
    "tailwindcss": "^3.3.2",
    "typescript": "^5.6.2"
  }
}

================
File: client/app/postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: client/app/README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: client/app/src/components/DashboardButton.tsx
================
import React from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useRouter } from 'next/router';

const DashboardButton: React.FC = () => {
  const { logout } = useAuth();
  const router = useRouter();

  const handleLogout = () => {
    logout();
    router.push('/dashboard');
  };

  return (
    <button onClick={handleLogout} className="bg-blue-500 text-white px-4 py-2 rounded">
      Dashboard
    </button>
  );
};

export default DashboardButton;

================
File: client/app/src/components/Header.tsx
================
import React from 'react';
import Link from 'next/link';
import { useAuth } from '../contexts/AuthContext';
import { useRouter } from 'next/router';

const Header: React.FC = () => {
  const { user, logout } = useAuth();
  const router = useRouter();

  const handleLogout = () => {
    logout();
    router.push('/');
  };

  return (
    <header className="bg-white shadow-md fixed top-0 left-0 right-0 z-10">
      <nav className="container mx-auto px-6 py-3">
        <div className="flex justify-between items-center">
          <div className="text-xl font-semibold text-gray-700">
            <Link href="/dashboard">New Cloud</Link>
          </div>
          {user && (
            <div className="flex items-center space-x-4">
              <Link href="/dashboard" className="text-gray-800 hover:text-blue-500">
                Dashboard
              </Link>
              <Link href="/profile" className="text-gray-800 hover:text-blue-500">
                Profile
              </Link>
              <Link href="/settings" className="text-gray-800 hover:text-blue-500">
                Settings
              </Link>
              {user.role === 'site_admin' && (
                <Link href="/admin/users" className="text-gray-800 hover:text-blue-500">
                  Manage Users
                </Link>
              )}
              <button
                onClick={handleLogout}
                className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded"
              >
                Logout
              </button>
            </div>
          )}
        </div>
      </nav>
    </header>
  );
};

export default Header;

================
File: client/app/src/components/Layout.tsx
================
// src/components/Layout.tsx
import React from 'react';
import Header from './Header';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <div className="min-h-screen bg-gray-100">
      <Header />
      <main className="pt-16 pb-8 px-4 sm:px-6 lg:px-8">
        {children}
      </main>
    </div>
  );
};

export default Layout;

================
File: client/app/src/components/LogoutButton.tsx
================
// client/src/components/LogoutButton.tsx

import React from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useRouter } from 'next/router';

const LogoutButton: React.FC = () => {
  const { logout } = useAuth();
  const router = useRouter();

  const handleLogout = () => {
    logout();
    router.push('/login');
  };

  return (
    <button onClick={handleLogout} className="bg-red-500 text-white px-4 py-2 rounded">
      Logout
    </button>
  );
};

export default LogoutButton;

================
File: client/app/src/components/ProtectedRoute.tsx
================
// client/src/components/ProtectedRoute.tsx

import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '../contexts/AuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { isAuthenticated } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/');
    }
  }, [isAuthenticated, router]);

  if (!isAuthenticated) {
    return null; // or a loading spinner
  }

  return <>{children}</>;
};

export default ProtectedRoute;

================
File: client/app/src/contexts/AuthContext.tsx
================
import React, { createContext, useState, useContext, useEffect } from 'react';
import { setToken, getToken, removeToken } from '../utils/auth';
import api from '../utils/api';

export interface User {
  id: string;
  username: string;
  email: string;
  firstName: string;
  lastName: string;
  timezone: string;
  role: string;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (token: string) => Promise<void>;
  logout: () => void;
  updateUser: (user: Partial<User>) => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const token = getToken();
    if (token) {
      fetchUser();
    }
  }, []);

  const fetchUser = async () => {
    try {
      const response = await api.get<User>('/auth/profile');
      console.log('Fetched user:', response.data);
      setUser(response.data);
    } catch (error) {
      console.error('Failed to fetch user', error);
      removeToken();
    }
  };

  const login = async (token: string) => {
    setToken(token);
    await fetchUser();
  };

  const logout = () => {
    removeToken();
    setUser(null);
  };

  const updateUser = (updatedUser: Partial<User>) => {
    setUser(prevUser => prevUser ? { ...prevUser, ...updatedUser } : null);
  };

  return (
    <AuthContext.Provider value={{ user, isAuthenticated: !!user, login, logout, updateUser }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

================
File: client/app/src/pages/_app.tsx
================
import { useEffect } from 'react';
import type { AppProps } from 'next/app';
import { AuthProvider } from '../contexts/AuthContext';
import Layout from '../components/Layout';
import '../styles/globals.css';

function MyApp({ Component, pageProps }: AppProps) {
  useEffect(() => {
    // Check for dark mode preference
    if (localStorage.getItem('darkMode') === 'true') {
      document.documentElement.classList.add('dark');
    }
  }, []);

  return (
    <AuthProvider>
      <Layout>
        <Component {...pageProps} />
      </Layout>
    </AuthProvider>
  );
}

export default MyApp;

================
File: client/app/src/pages/admin/users.tsx
================
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '../../contexts/AuthContext';
import api from '../../utils/api';

interface User {
  id: string;
  username: string;
  email: string;
  role: string;
  is_active: boolean;
}

export default function UserManagement() {
  const [users, setUsers] = useState<User[]>([]);
  const [newUser, setNewUser] = useState({ username: '', email: '', password: '', firstName: '', lastName: '', timezone: 'America/Boise', role: 'user' });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const { user } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (user && user.role === 'site_admin') {
      fetchUsers();
    } else {
      router.push('/dashboard');
    }
  }, [user, router]);

  const fetchUsers = async () => {
    try {
      const response = await api.get<User[]>('/auth/users');
      setUsers(response.data);
    } catch (error) {
      console.error('Failed to fetch users', error);
      setError('Failed to fetch users. Please try again.');
    }
  };

  const updateUserRole = async (userId: string, newRole: string) => {
    try {
      await api.put(`/auth/users/${userId}/role`, { role: newRole });
      fetchUsers();
      setSuccess('User role updated successfully');
    } catch (error) {
      console.error('Failed to update user role', error);
      setError('Failed to update user role. Please try again.');
    }
  };

  const createUser = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    try {
      await api.post('/auth/register', newUser);
      setNewUser({ username: '', email: '', password: '', firstName: '', lastName: '', timezone: 'America/Boise', role: 'user' });
      fetchUsers();
      setSuccess('User created successfully');
    } catch (error: any) {
      console.error('Failed to create user', error);
      setError(error.response?.data?.message || 'Failed to create user. Please try again.');
    }
  };

  const deleteUser = async (userId: string) => {
    if (window.confirm('Are you sure you want to delete this user?')) {
      try {
        await api.delete(`/auth/users/${userId}`);
        fetchUsers();
        setSuccess('User deleted successfully');
      } catch (error) {
        console.error('Failed to delete user', error);
        setError('Failed to delete user. Please try again.');
      }
    }
  };

  const toggleUserStatus = async (userId: string, currentStatus: boolean) => {
    try {
      await api.put(`/auth/users/${userId}/status`, { is_active: !currentStatus });
      setUsers(users.map(u => u.id === userId ? { ...u, is_active: !currentStatus } : u));
      setSuccess(`User ${currentStatus ? 'disabled' : 'enabled'} successfully`);
    } catch (error) {
      console.error('Failed to update user status', error);
      setError('Failed to update user status. Please try again.');
    }
  };
  
  return (
    <div className="min-h-screen bg-gray-100 py-6 flex flex-col justify-center sm:py-12">
      <div className="relative py-3 sm:max-w-x3 sm:mx-auto">
        <div className="relative px-2 py-10 bg-white shadow-lg sm:rounded-3xl sm:p-20">
          <h1 className="text-2xl font-semibold mb-6">User Management</h1>
          
          {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">{error}</div>}
          {success && <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">{success}</div>}
          {/* Create User Form */}
          <form onSubmit={createUser} className="mb-8">
            <h2 className="text-xl font-semibold mb-4">Create New User</h2>
            <input
              type="text"
              placeholder="Username"
              value={newUser.username}
              onChange={(e) => setNewUser({...newUser, username: e.target.value})}
              className="mb-2 p-2 w-full border rounded"
              required
            />
            <input
              type="email"
              placeholder="Email"
              value={newUser.email}
              onChange={(e) => setNewUser({...newUser, email: e.target.value})}
              className="mb-2 p-2 w-full border rounded"
              required
            />
            <input
              type="password"
              placeholder="Password"
              value={newUser.password}
              onChange={(e) => setNewUser({...newUser, password: e.target.value})}
              className="mb-2 p-2 w-full border rounded"
              required
            />
            <input
              type="text"
              placeholder="First Name"
              value={newUser.firstName}
              onChange={(e) => setNewUser({...newUser, firstName: e.target.value})}
              className="mb-2 p-2 w-full border rounded"
              required
            />
            <input
              type="text"
              placeholder="Last Name"
              value={newUser.lastName}
              onChange={(e) => setNewUser({...newUser, lastName: e.target.value})}
              className="mb-2 p-2 w-full border rounded"
              required
            />
            <select
              value={newUser.timezone}
              onChange={(e) => setNewUser({...newUser, timezone: e.target.value})}
              className="mb-2 p-2 w-full border rounded"
            >
              <option value="America/Boise">America/Boise</option>
              <option value="America/New_York">America/New_York</option>
              <option value="America/Chicago">America/Chicago</option>
              <option value="America/Denver">America/Denver</option>
              <option value="America/Los_Angeles">America/Los_Angeles</option>
            </select>
            <select
              value={newUser.role}
              onChange={(e) => setNewUser({...newUser, role: e.target.value})}
              className="mb-2 p-2 w-full border rounded"
            >
              <option value="user">User</option>
              <option value="application_admin">Application Admin</option>
              <option value="site_admin">Site Admin</option>
            </select>
            <button type="submit" className="w-full bg-blue-500 text-white p-2 rounded">Create User</button>
          </form>

          {/* User List */}
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Username</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {users.map((user) => (
                <tr key={user.id}>
                  <td className="px-6 py-4 whitespace-nowrap">{user.username}</td>
                  <td className="px-6 py-4 whitespace-nowrap">{user.email}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <select
                      value={user.role}
                      onChange={(e) => updateUserRole(user.id, e.target.value)}
                      className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    >
                      <option value="user">User</option>
                      <option value="application_admin">Application Admin</option>
                      <option value="site_admin">Site Admin</option>
                    </select>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <button
                        onClick={() => toggleUserStatus(user.id, user.is_active)}
                        className={`relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 ${
                          user.is_active ? 'bg-indigo-600' : 'bg-gray-200'
                        }`}
                        role="switch"
                        aria-checked={user.is_active}
                      >
                        <span
                          aria-hidden="true"
                          className={`pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200 ${
                            user.is_active ? 'translate-x-5' : 'translate-x-0'
                          }`}
                        />
                      </button>
                      <span className="ml-3 text-sm font-medium text-gray-900">
                        {user.is_active ? 'Active' : 'Inactive'}
                      </span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <button onClick={() => deleteUser(user.id)} className="text-red-600 hover:text-red-900">Delete</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

================
File: client/app/src/pages/dashboard.tsx
================
// src/pages/dashboard.tsx

import { useEffect } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useAuth } from '../contexts/AuthContext';
import ProtectedRoute from '../components/ProtectedRoute';

export default function Dashboard() {
  const { user, logout } = useAuth();
  const router = useRouter();

  useEffect(() => {
    console.log('Dashboard user:', user);
  }, [user]);

  const handleLogout = () => {
    logout();
    router.push('/');
  };

  return (
    <ProtectedRoute>
        <main>
          <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
            <div className="px-4 py-6 sm:px-0">
              <div className="border-4 border-dashed border-gray-200 rounded-lg h-96">
                <div className="flex flex-col items-center justify-center h-full">
                  <h2 className="text-2xl font-semibold mb-4">Welcome to Your Dashboard</h2>
                  <p className="mb-4">Here you can access all New Cloud services.</p>
                  <Link href="/settings" className="text-indigo-600 hover:text-indigo-500">
                    View/Update Your Profile
                  </Link>
                </div>
              </div>
            </div>
          </div>
        </main>
    </ProtectedRoute>
  );
}

================
File: client/app/src/pages/index.tsx
================
import { useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useAuth } from '../contexts/AuthContext';
import api from '../utils/api';

export default function Home() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();
  const { login } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    try {
      const response = await api.post('/auth/login', { username, password });
      login(response.data.token);
      router.push('/dashboard');
    } catch (err: any) {
      if (err.response?.status === 403) {
        setError(err.response.data.message);
      } else {
        setError('Invalid username or password');
      }
    }
  };
  
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Welcome to New Cloud
          </h2>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <input type="hidden" name="remember" value="true" />
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="username" className="sr-only">Username</label>
              <input
                id="username"
                name="username"
                type="text"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">Password</label>
              <input
                id="password"
                name="password"
                type="password"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>

          {error && <div className="text-red-500 text-sm">{error}</div>}

          <div>
            <button
              type="submit"
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Sign in
            </button>
          </div>
        </form>
        <div className="text-center">
          <Link href="/register" className="font-medium text-indigo-600 hover:text-indigo-500">
            Do you need an account? Register here
          </Link>
        </div>
      </div>
    </div>
  );
}

================
File: client/app/src/pages/profile.tsx
================
import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import api from '../utils/api';

interface User {
  id: string;
  username: string;
  email: string;
  first_name: string;
  last_name: string;
  timezone: string;
}

const TIMEZONES = [
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
  'America/Anchorage',
  'America/Adak',
  'Pacific/Honolulu',
];

const Profile: React.FC = () => {
  const { updateUser } = useAuth();
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [newPassword, setNewPassword] = useState('');

  useEffect(() => {
    fetchUserProfile();
  }, []);

  const fetchUserProfile = async () => {
    setIsLoading(true);
    try {
      const response = await api.get<User>('/auth/profile');
      console.log('API Response:', response.data);
      setUser(response.data);
      updateUser(response.data);
    } catch (err) {
      console.error('Error fetching user profile:', err);
      setError('Failed to fetch user profile. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setUser(prev => prev ? { ...prev, [name]: value || '' } : null);
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    if (!user) return;

    // Create a new object with non-null values
    const updatedUser = Object.fromEntries(
      Object.entries(user).map(([key, value]) => [key, value === null ? '' : value])
    ) as User;

    try {
      console.log('Sending update:', updatedUser);
      const response = await api.put<User>('/auth/profile', updatedUser);
      console.log('Update Response:', response.data);
      setUser(response.data);
      updateUser(response.data);
      setSuccess('Profile updated successfully');
    } catch (err) {
      console.error('Error updating profile:', err);
      setError('Failed to update profile. Please try again.');
    }
  };

  const handlePasswordChange = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    if (!newPassword) {
      setError('New password is required');
      return;
    }

    try {
      await api.put('/auth/change-password', { newPassword });
      setSuccess('Password changed successfully');
      setNewPassword('');
    } catch (err) {
      console.error('Error changing password:', err);
      setError('Failed to change password. Please try again.');
    }
  };

  if (isLoading) return <div>Loading...</div>;
  if (!user) return <div>No user data available</div>;

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">User Profile</h1>
      
      {/* Current User Information */}
      <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <h2 className="text-xl font-semibold mb-2">Current Information</h2>
        <p><strong>Username:</strong> {user.username || 'N/A'}</p>
        <p><strong>Name:</strong> {`${user.first_name || ''} ${user.last_name || ''}`.trim() || 'N/A'}</p>
        <p><strong>Email:</strong> {user.email || 'N/A'}</p>
        <p><strong>Timezone:</strong> {user.timezone || 'N/A'}</p>
      </div>

      {/* Update User Information Form */}
      <form onSubmit={handleSubmit} className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <h2 className="text-xl font-semibold mb-2">Update Information</h2>
        {error && <p className="text-red-500 mb-4">{error}</p>}
        {success && <p className="text-green-500 mb-4">{success}</p>}
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="username">
            Username
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="username"
            type="text"
            name="username"
            value={user.username}
            onChange={handleInputChange}
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="first_name">
            First Name
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="first_name"
            type="text"
            name="first_name"
            value={user.first_name || ''}
            onChange={handleInputChange}
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="last_name">
            Last Name
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="last_name"
            type="text"
            name="last_name"
            value={user.last_name || ''}
            onChange={handleInputChange}
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="email">
            Email
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="email"
            type="email"
            name="email"
            value={user.email || ''}
            onChange={handleInputChange}
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="timezone">
            Timezone
          </label>
          <select
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="timezone"
            name="timezone"
            value={user.timezone}
            onChange={handleInputChange}
          >
            {TIMEZONES.map((tz) => (
              <option key={tz} value={tz}>{tz}</option>
            ))}
          </select>
        </div>
        <button
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          type="submit"
        >
          Update Profile
        </button>
      </form>
    {/* Change Password Form */}
      <form onSubmit={handlePasswordChange} className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <h2 className="text-xl font-semibold mb-2">Change Password</h2>
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="new_password">
            New Password
          </label>
          <input
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            id="new_password"
            type="password"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
          />
        </div>
        <button
          className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          type="submit"
        >
          Change Password
        </button>
      </form>
    </div>
  );
};

export default Profile;

================
File: client/app/src/pages/register.tsx
================
import { useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useAuth } from '../contexts/AuthContext';
import api from '../utils/api';

const timezones = [
  'America/Boise',
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
  // Add more timezones as needed
];

export default function Register() {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [timezone, setTimezone] = useState('America/Boise');
  const [error, setError] = useState('');
  const router = useRouter();
  const { login } = useAuth();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (password !== confirmPassword) {
      setError("Passwords don't match");
      return;
    }

    try {
      const response = await api.post('/auth/register', {
        username,
        email,
        password: String(password), // Explicitly convert to string
        firstName,
        lastName,
        timezone
      });
      login(response.data.token);
      router.push('/dashboard');
    } catch (err: any) {
      console.error('Registration error:', err.response?.data || err.message);
      if (err.response?.data?.error) {
        setError(`Registration failed: ${err.response.data.error}`);
      } else if (err.response?.data?.message) {
        setError(err.response.data.message);
      } else {
        setError('Registration failed. Please try again.');
      }
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Register for New Cloud
          </h2>
        </div>
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <input
                id="username"
                name="username"
                type="text"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
              />
            </div>
            <div>
              <input
                id="email"
                name="email"
                type="email"
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Email (optional)"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div>
              <input
                id="firstName"
                name="firstName"
                type="text"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="First Name"
                value={firstName}
                onChange={(e) => setFirstName(e.target.value)}
              />
            </div>
            <div>
              <input
                id="lastName"
                name="lastName"
                type="text"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Last Name"
                value={lastName}
                onChange={(e) => setLastName(e.target.value)}
              />
            </div>
            <div>
              <select
                id="timezone"
                name="timezone"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                value={timezone}
                onChange={(e) => setTimezone(e.target.value)}
              >
                {timezones.map((tz) => (
                  <option key={tz} value={tz}>{tz}</option>
                ))}
              </select>
            </div>
            <div>
              <input
                id="password"
                name="password"
                type="password"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
            <div>
              <input
                id="confirm-password"
                name="confirm-password"
                type="password"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
                placeholder="Confirm Password"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
              />
            </div>
          </div>

          {error && <div className="text-red-500 text-sm">{error}</div>}

          <div>
            <button
              type="submit"
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Register
            </button>
          </div>
        </form>
        <div className="text-center">
          <Link href="/" className="font-medium text-indigo-600 hover:text-indigo-500">
            Already have an account? Sign in here
          </Link>
        </div>
      </div>
    </div>
  );
}

================
File: client/app/src/pages/settings.tsx
================
import React, { useState, useEffect } from 'react';

const Settings: React.FC = () => {
  const [darkMode, setDarkMode] = useState(false);

  useEffect(() => {
    const isDarkMode = localStorage.getItem('darkMode') === 'true';
    setDarkMode(isDarkMode);
  }, []);

  const toggleDarkMode = () => {
    const newDarkMode = !darkMode;
    setDarkMode(newDarkMode);
    localStorage.setItem('darkMode', newDarkMode.toString());
    if (newDarkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-4">Settings</h1>
      <div className="mb-4">
        <label htmlFor="darkMode" className="flex items-center cursor-pointer">
          <div className="relative">
            <input type="checkbox" id="darkMode" className="sr-only" checked={darkMode} onChange={toggleDarkMode} />
            <div className="block bg-gray-600 w-14 h-8 rounded-full"></div>
            <div className={`dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition ${darkMode ? 'transform translate-x-full bg-blue-400' : ''}`}></div>
          </div>
          <div className="ml-3 text-gray-700 font-medium">
            Dark Mode
          </div>
        </label>
      </div>
      {/* Add more settings as needed */}
    </div>
  );
};

export default Settings;

================
File: client/app/src/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

/* Add these styles at the end of the file */
.switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
}

.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  transition: .4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  transition: .4s;
}

input:checked + .slider {
  background-color: #2196F3;
}

input:focus + .slider {
  box-shadow: 0 0 1px #2196F3;
}

input:checked + .slider:before {
  transform: translateX(26px);
}

.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}

================
File: client/app/src/styles/page.tsx
================
import Head from 'next/head'

export default function Home() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen py-2">
      <Head>
        <title>New Cloud</title>
        <meta name="description" content="New Cloud application" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col items-center justify-center w-full flex-1 px-20 text-center">
        <h1 className="text-6xl font-bold">
          Welcome to <span className="text-blue-600">New Cloud</span>
        </h1>
        <p className="mt-3 text-2xl">
          Your powerful cloud application
        </p>
      </main>
    </div>
  )
}

================
File: client/app/src/utils/api.ts
================
import axios from 'axios';
import { getToken } from './auth';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';

const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

api.interceptors.request.use((config) => {
  const token = getToken();
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  console.log('API Request:', config.method?.toUpperCase(), config.url, config.data);
  return config;
});

api.interceptors.response.use(
  (response) => {
    console.log('API Response:', response.status, response.data);
    return response;
  },
  (error) => {
    console.error('API Error:', error.response?.status, error.response?.data);
    return Promise.reject(error);
  }
);

export default api;

================
File: client/app/src/utils/auth.ts
================
// client/src/utils/auth.ts

export function setToken(token: string): void {
    if (typeof window !== 'undefined') {
      localStorage.setItem('token', token);
    }
  }
  
  export function getToken(): string | null {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('token');
    }
    return null;
  }
  
  export function removeToken(): void {
    if (typeof window !== 'undefined') {
      localStorage.removeItem('token');
    }
  }
  
  export function isAuthenticated(): boolean {
    if (typeof window !== 'undefined') {
      return !!localStorage.getItem('token');
    }
    return false;
  }

================
File: client/app/tailwind.config.ts
================
import {nextui} from '@nextui-org/theme';
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    "./node_modules/@nextui-org/theme/dist/components/(card|ripple).js"
  ],
  theme: {
    extend: {},
  },
  plugins: [nextui()],
  darkMode: 'class',
};

export default config;

================
File: client/app/tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "types": ["node", "jest", "@babel/core", "@babel/generator", "@babel/template", "@babel/traverse", "json-schema"]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

================
File: docker-compose.yml
================
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: newcloud
      POSTGRES_USER: newcloud_user
      POSTGRES_PASSWORD: foxxdev1dt431
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 5432:5432
    healthcheck:
      # trunk-ignore(yamllint/quoted-strings)
      test: ["CMD-SHELL", "pg_isready -U newcloud_user -d newcloud"]
      interval: 5s
      timeout: 5s
      retries: 5
  gateway:
    build: 
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - 4000:4000
    environment:
      - AUTH_SERVICE_URL=http://auth:3001
      - CLIENT_APP_URL=http://client:3000
    depends_on:
      - auth
      - client

  auth:
    build: 
      context: .
      dockerfile: services/auth/Dockerfile
    expose:
      - 3001  
    ports:
      - 3001:3001
    environment:
      - NODE_ENV=production
      - DB_USER=newcloud_user
      - DB_HOST=postgres
      - DB_NAME=newcloud
      - DB_PASSWORD=foxxdev1dt431
      - DB_PORT=5432
      - JWT_SECRET=test@69lol
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./services/auth/uploads:/usr/src/app/uploads

  client:
    build:
      context: ./client/app
      dockerfile: Dockerfile
    expose:
      - 3000  
    ports:
      - 3000:3000
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    depends_on:
      - auth

volumes:
  postgres_data:
  uploads_data:

================
File: Dockerfile
================
FROM node:20

WORKDIR /usr/src/app

# Copy package.json and package-lock.json
COPY client/app/package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the client code
COPY client/app .

# Build the Next.js app
RUN npm run build

# Expose the port the app runs on
EXPOSE 3000

# Command to run the application
CMD [ "npm", "start" ]

================
File: gateway/dist/index.js
================
"use strict";

================
File: gateway/Dockerfile
================
FROM node:20

WORKDIR /usr/src/app

COPY package*.json ./
RUN npm install

COPY . .
RUN npm run build

EXPOSE 4000
CMD ["npm", "start"]

================
File: gateway/package.json
================
{
    "name": "new-cloud-client",
    "version": "0.1.0",
    "private": true,
    "scripts": {
        "start": "node dist/index.js",
        "dev": "ts-node-dev src/index.ts",
        "build": "tsc",
        "test": "echo \"Error: no test specified\" && exit 1",
        "stop": "node dist/index.js"
    },
    "engines": {
        "node": "20.17.0"
    },
    "dependencies": {
        "@heroicons/react": "^2.1.5",
        "@tanstack/react-query": "^4.29.5",
        "axios": "^1.7.7",
        "babel": "^7.25.0",
        "dotenv": "^16.4.5",
        "express": "^4.21.0",
        "http-proxy-middleware": "^3.0.2",
        "new-cloud-client": "file:",
        "next": "^14.2.8",
        "react": "^18.2.0",
        "react-dom": "^18.2.0"
    },
    "devDependencies": {
        "@babel/core": "^7.25.2",
        "@babel/eslint-parser": "^7.22.5",
        "@babel/preset-env": "^7.22.5",
        "@babel/preset-react": "^7.22.5",
        "@babel/preset-typescript": "^7.22.5",
        "@testing-library/jest-dom": "^6.5.0",
        "@testing-library/react": "^14.0.0",
        "@types/babel__core": "^7.20.5",
        "@types/babel__generator": "^7.6.8",
        "@types/babel__template": "^7.4.4",
        "@types/babel__traverse": "^7.20.6",
        "@types/cors": "^2.8.17",
        "@types/express": "^4.17.21",
        "@types/http-proxy-middleware": "^1.0.0",
        "@types/json-schema": "^7.0.15",
        "@types/jsonwebtoken": "^9.0.6",
        "@types/node": "^22.5.4",
        "@types/react": "^18.2.6",
        "@types/react-dom": "^18.2.4",
        "autoprefixer": "^10.4.14",
        "babel": "^6.23.0",
        "eslint": "^8.40.0",
        "eslint-config-next": "^14.2.8",
        "jest": "^29.5.0",
        "postcss": "^8.4.23",
        "tailwindcss": "^3.3.2",
        "typescript": "^5.6.2"
    },
    "main": "index.js",
    "keywords": [],
    "author": "",
    "license": "ISC",
    "description": ""
}

================
File: gateway/src/index.ts
================
import express from 'express';
import { createProxyMiddleware } from 'http-proxy-middleware';
import dotenv from 'dotenv';

dotenv.config();

const app = express();

// Proxy middleware configuration
app.use('/auth', createProxyMiddleware({
  target: process.env.AUTH_SERVICE_URL || 'http://localhost:3001',
  changeOrigin: true,
  pathRewrite: {
    '^/auth': '', // remove /auth from the URL
  },
}));

// Add more proxy routes for other services as they are developed

// For now, proxy all other requests to the client app
app.use('/', createProxyMiddleware({
  target: process.env.CLIENT_APP_URL || 'http://localhost:3000',
  changeOrigin: true,
}));

const PORT = process.env.GATEWAY_PORT || 4000;
app.listen(PORT, () => {
  console.log(`Gateway running on port ${PORT}`);
});

================
File: gateway/structure.txt
================
gateway/
├── src/
│   ├── index.ts              # Entry point
│   ├── routes/               # Route definitions
│   │   ├── auth.ts
│   │   ├── files.ts
│   │   ├── talk.ts
│   │   ├── groupware.ts
│   │   └── office.ts
│   ├── middleware/           # Custom middleware
│   │   ├── authentication.ts
│   │   ├── rateLimit.ts
│   │   └── errorHandler.ts
│   ├── services/             # Service integrations
│   │   ├── authService.ts
│   │   ├── filesService.ts
│   │   └── ...
│   └── config/               # Configuration files
│       ├── routes.ts         # Route configurations
│       └── services.ts       # Service endpoint configurations
├── package.json
└── tsconfig.json

================
File: gateway/tsconfig.json
================
{
    "compilerOptions": {
      "target": "es6",
      "module": "commonjs",
      "outDir": "./dist",
      "rootDir": "./src",
      "strict": true,
      "esModuleInterop": true,
      "skipLibCheck": true,
      "forceConsistentCasingInFileNames": true,
      "resolveJsonModule": true
    },
    "include": ["src/**/*"],
    "exclude": ["node_modules"]
  }

================
File: init.sql
================
CREATE TABLE IF NOT EXISTS roles (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    timezone VARCHAR(50) DEFAULT 'America/Boise',
    profile_picture_url VARCHAR(255),
    role_id INTEGER REFERENCES roles(id)
);

-- Insert default roles
INSERT INTO roles (name) VALUES ('user'), ('application_admin'), ('site_admin')
ON CONFLICT (name) DO NOTHING;

-- Grant necessary permissions
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO newcloud_user;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO newcloud_user;
GRANT ALL PRIVILEGES ON SCHEMA newcloud_schema TO newcloud_user;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA newcloud_schema TO newcloud_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA newcloud_schema TO newcloud_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA newcloud_schema GRANT ALL ON TABLES TO newcloud_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA newcloud_schema GRANT ALL ON SEQUENCES TO newcloud_user;

================
File: notes.txt
================
-- Replace 'your_user' with the actual username from your .env file
GRANT ALL PRIVILEGES ON SCHEMA newcloud_schema TO newcloud_user;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA newcloud_schema TO newcloud_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA newcloud_schema TO newcloud_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA newcloud_schema GRANT ALL ON TABLES TO newcloud_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA newcloud_schema GRANT ALL ON SEQUENCES TO newcloud_user;

ALTER TABLE users OWNER TO newcloud_user;

ALTER USER newcloud_user WITH PASSWORD 'foxxdev1dt431';

SELECT COUNT(*) as total_users, COUNT(CASE WHEN is_active THEN 1 END) as active_users FROM newcloud_schema.users;

SELECT id, username, email, is_active FROM users;

================
File: package.json
================
{
  "name": "new-cloud-client",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest",
    "test:watch": "jest --watch"
  },
  "engines": {
    "node": "20.17.0"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.5",
    "@tanstack/react-query": "^4.29.5",
    "axios": "^1.7.7",
    "babel": "^7.25.0",
    "new-cloud-client": "file:",
    "next": "^14.2.8",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@babel/eslint-parser": "^7.22.5",
    "@babel/preset-env": "^7.22.5",
    "@babel/preset-react": "^7.22.5",
    "@babel/preset-typescript": "^7.22.5",
    "@testing-library/jest-dom": "^6.5.0",
    "@testing-library/react": "^14.0.0",
    "@types/babel__core": "^7.20.5",
    "@types/babel__generator": "^7.6.8",
    "@types/babel__template": "^7.4.4",
    "@types/babel__traverse": "^7.20.6",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/json-schema": "^7.0.15",
    "@types/jsonwebtoken": "^9.0.6",
    "@types/node": "^22.5.4",
    "@types/react": "^18.2.6",
    "@types/react-dom": "^18.2.4",
    "autoprefixer": "^10.4.14",
    "babel": "^6.23.0",
    "eslint": "^8.40.0",
    "eslint-config-next": "^14.2.8",
    "jest": "^29.5.0",
    "postcss": "^8.4.23",
    "tailwindcss": "^3.3.2",
    "typescript": "^5.6.2"
  }
}

================
File: README.md
================
# New Cloud

New Cloud is a modern web application built with Node.js, Next.js, and a microservices architecture. It aims to provide a robust cloud storage and collaboration platform.

## Project Structure

```
new-cloud/
├── services/
│   ├── auth/
│   ├── files/ (planned)
│   ├── talk/ (planned)
│   ├── groupware/ (planned)
│   └── office/ (planned)
├── client/
│   └── app/
├── shared/ (planned)
│   ├── utils/
│   └── models/
├── gateway/ (planned)
├── config/
├── docker-compose.yml
└── README.md
```

## Current State

The project is in active development. Currently, the following components are implemented:

- Authentication service
- Client application (Next.js)

## Technologies Used

### Backend
- Node.js (v20.x LTS)
- Express.js
- PostgreSQL
- JSON Web Tokens (JWT) for authentication
- bcrypt for password hashing
- multer for file uploads

### Frontend
- Next.js 14
- React 18
- TailwindCSS for styling
- Axios for API requests

### DevOps
- Docker and Docker Compose for containerization
- npm for package management

## Key Packages

### Backend (Auth Service)
- express: ^5.0.0
- jsonwebtoken: ^9.0.2
- bcrypt: ^5.1.1
- pg: ^8.12.0 (PostgreSQL client)
- multer: ^1.4.5-lts.1
- cors: ^2.8.5

### Frontend (Next.js App)
- next: ^14.2.8
- react: ^18.2.0
- react-dom: ^18.2.0
- @tanstack/react-query: ^5.55.4
- axios: ^1.7.7
- tailwindcss: ^3.3.2

## Setup Instructions

1. Clone the repository:
   ```
   git clone https://github.com/your-username/new-cloud.git
   cd new-cloud
   ```

2. Install dependencies:
   ```
   npm install
   cd client/app && npm install
   cd ../../services/auth && npm install
   ```

3. Set up environment variables:
   - Create a `.env` file in the root directory and in `services/auth/`
   - Add necessary environment variables (database connection, JWT secret, etc.)

4. Start the development servers:
   ```
   # In the root directory
   docker-compose up -d   # Start PostgreSQL

   # In services/auth
   npm run dev

   # In client/app
   npm run dev
   ```

5. Access the application:
   - Frontend: http://localhost:3000
   - Auth API: http://localhost:3001

## API Documentation

(Include a brief overview of available API endpoints, or link to a more detailed API documentation)

## Contributing

(Add guidelines for contributing to the project)

## License

(Specify the license under which the project is released)

## Roadmap

(To be added by you)

---

This README is a living document and will be updated as the project evolves.

================
File: services/auth/check-permissions.js
================
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: parseInt(process.env.DB_PORT || '5432'),
});

async function checkPermissions() {
  const client = await pool.connect();
  try {
    // Set search_path
    await client.query('SET search_path TO newcloud_schema, public');

    // Check table ownership
    const ownershipQuery = `
      SELECT tableowner 
      FROM pg_tables 
      WHERE schemaname = 'newcloud_schema' AND tablename = 'users'
    `;
    const ownershipResult = await client.query(ownershipQuery);
    console.log('Table owner:', ownershipResult.rows[0]?.tableowner);

    // Check user permissions
    const permissionsQuery = `
      SELECT grantee, privilege_type 
      FROM information_schema.role_table_grants 
      WHERE table_schema = 'newcloud_schema' 
      AND table_name = 'users' 
      AND grantee = $1
    `;
    const permissionsResult = await client.query(permissionsQuery, [process.env.DB_USER]);
    console.log('User permissions:', permissionsResult.rows);

    // Check if user is a superuser
    const superuserQuery = `
      SELECT rolsuper 
      FROM pg_roles 
      WHERE rolname = $1
    `;
    const superuserResult = await client.query(superuserQuery, [process.env.DB_USER]);
    console.log('Is superuser:', superuserResult.rows[0]?.rolsuper);

  } catch (err) {
    console.error('Error checking permissions:', err);
  } finally {
    client.release();
    await pool.end();
  }
}

checkPermissions();

================
File: services/auth/database.json
================
{
    "dev": {
      "driver": "pg",
      "user": "newcloud_user",
      "password": "foxxdev1dt431",
      "host": "localhost",
      "database": "newcloud",
      "port": "5432"
    }
  }

================
File: services/auth/db.ts
================
import { Pool, PoolConfig } from 'pg';
import dotenv from 'dotenv';

dotenv.config();

const poolConfig: PoolConfig = {
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD ? String(process.env.DB_PASSWORD) : undefined,
  port: parseInt(process.env.DB_PORT || '5432'),
  options: '-c search_path=newcloud_schema,public'
};

const pool = new Pool(poolConfig);

pool.on('error', (err) => {
  console.error('Unexpected error on idle client', err);
});

// Test database connection
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('Error connecting to the database:', err);
  } else {
    console.log('Successfully connected to the database');
  }
});

export default pool;

================
File: services/auth/dist/auth.js
================
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateToken = generateToken;
exports.authMiddleware = authMiddleware;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const JWT_SECRET = process.env.JWT_SECRET || 'test@69lol';
function generateToken(user) {
    return jsonwebtoken_1.default.sign({ id: user.id, username: user.username }, JWT_SECRET, { expiresIn: '1d' });
}
function authMiddleware(req, res, next) {
    var _a;
    const token = (_a = req.headers.authorization) === null || _a === void 0 ? void 0 : _a.split(' ')[1];
    if (!token) {
        return res.status(401).json({ message: 'No token provided' });
    }
    try {
        const decoded = jsonwebtoken_1.default.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    }
    catch (error) {
        return res.status(401).json({ message: 'Invalid token' });
    }
}

================
File: services/auth/dist/db.js
================
"use strict";
// services/auth/src/db.ts
Object.defineProperty(exports, "__esModule", { value: true });
const pg_1 = require("pg");
const pool = new pg_1.Pool({
    user: process.env.DB_USER || 'newcloud_user',
    host: process.env.DB_HOST || 'localhost',
    database: process.env.DB_NAME || 'newcloud',
    password: process.env.DB_PASSWORD || 'NOTthisday@@22',
    port: parseInt(process.env.DB_PORT || '5432'),
});
exports.default = pool;

================
File: services/auth/dist/routes/auth.js
================
"use strict";
// services/auth/src/routes/auth.ts
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const bcrypt_1 = __importDefault(require("bcrypt"));
const auth_1 = require("../auth");
const server_1 = __importDefault(require("../server"));
const multer_1 = __importDefault(require("multer"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const router = express_1.default.Router();
// File upload configuration
const uploadDir = path_1.default.join(__dirname, '..', 'uploads');
const storage = multer_1.default.diskStorage({
    destination: (req, file, cb) => cb(null, uploadDir),
    filename: (req, file, cb) => {
        const uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1E9)}`;
        cb(null, `${file.fieldname}-${uniqueSuffix}${path_1.default.extname(file.originalname)}`);
    }
});
const upload = (0, multer_1.default)({ storage });
// Ensure upload directory exists
if (!fs_1.default.existsSync(uploadDir)) {
    fs_1.default.mkdirSync(uploadDir, { recursive: true });
}
// Helper function for server error responses
const serverErrorResponse = (res, error) => {
    console.error('Server error:', error);
    res.status(500).json({ message: 'Internal server error' });
};
// User registration
router.post('/register', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { username, email, password, firstName, lastName, timezone } = req.body;
    if (!username || !password || !firstName || !lastName) {
        return res.status(400).json({ message: 'Username, password, first name, and last name are required' });
    }
    try {
        // Check if user already exists
        const userExists = yield server_1.default.query('SELECT * FROM newcloud_schema.users WHERE username = $1 OR email = $2', [username, email]);
        if (userExists.rows.length > 0) {
            return res.status(400).json({ message: 'Username or email already in use' });
        }
        // Hash password
        const salt = yield bcrypt_1.default.genSalt(10);
        const hashedPassword = yield bcrypt_1.default.hash(password, salt);
        // Get the 'user' role id
        const roleResult = yield server_1.default.query('SELECT id FROM newcloud_schema.roles WHERE name = $1', ['user']);
        if (roleResult.rows.length === 0) {
            return res.status(500).json({ message: 'Default role not found' });
        }
        const roleId = roleResult.rows[0].id;
        // Insert new user
        const newUser = yield server_1.default.query('INSERT INTO newcloud_schema.users (username, email, password, first_name, last_name, timezone, role_id) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, username', [username, email, hashedPassword, firstName, lastName, timezone || 'America/Boise', roleId]);
        const token = (0, auth_1.generateToken)({ id: newUser.rows[0].id, username: newUser.rows[0].username });
        res.status(201).json({ token });
    }
    catch (error) {
        serverErrorResponse(res, error);
    }
}));
// User login
router.post('/login', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { username, password } = req.body;
    try {
        const user = yield server_1.default.query('SELECT * FROM users WHERE username = $1', [username]);
        if (user.rows.length === 0) {
            return res.status(400).json({ message: 'Invalid username or password' });
        }
        const isPasswordValid = yield bcrypt_1.default.compare(password, user.rows[0].password);
        if (!isPasswordValid) {
            return res.status(400).json({ message: 'Invalid username or password' });
        }
        if (!user.rows[0].is_active) {
            return res.status(403).json({ message: 'Your account has been disabled. Please contact an administrator.' });
        }
        const token = (0, auth_1.generateToken)({ id: user.rows[0].id, username: user.rows[0].username });
        res.json({ token });
    }
    catch (error) {
        serverErrorResponse(res, error);
    }
}));
// Get user profile
router.get('/profile', auth_1.authMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const userId = req.user.id;
        const result = yield server_1.default.query('SELECT u.id, u.username, u.email, u.first_name, u.last_name, u.timezone, r.name as role FROM users u JOIN roles r ON u.role_id = r.id WHERE u.id = $1', [userId]);
        if (result.rows.length === 0) {
            return res.status(404).json({ message: 'User not found' });
        }
        res.json(result.rows[0]);
    }
    catch (error) {
        serverErrorResponse(res, error);
    }
}));
// Update user profile
router.put('/profile', auth_1.authMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const userId = req.user.id;
        const { first_name, last_name, email, timezone } = req.body;
        console.log('Received profile update request:', req.body);
        const result = yield server_1.default.query('UPDATE users SET first_name = $1, last_name = $2, email = $3, timezone = $4 WHERE id = $5 RETURNING id, username, email, first_name, last_name, timezone', [first_name || '', last_name || '', email, timezone, userId]);
        if (result.rows.length === 0) {
            console.log('User not found for update');
            return res.status(404).json({ message: 'User not found' });
        }
        console.log('Updated user:', result.rows[0]);
        res.json(result.rows[0]);
    }
    catch (error) {
        console.error('Error updating profile:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
}));
// Change password
router.put('/change-password', auth_1.authMiddleware, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const userId = req.user.id;
        const { currentPassword, newPassword } = req.body;
        const user = yield server_1.default.query('SELECT * FROM users WHERE id = $1', [userId]);
        if (user.rows.length === 0) {
            return res.status(404).json({ message: 'User not found' });
        }
        if (!(yield bcrypt_1.default.compare(currentPassword, user.rows[0].password))) {
            return res.status(400).json({ message: 'Current password is incorrect' });
        }
        const salt = yield bcrypt_1.default.genSalt(10);
        const hashedNewPassword = yield bcrypt_1.default.hash(newPassword, salt);
        yield server_1.default.query('UPDATE users SET password = $1 WHERE id = $2', [hashedNewPassword, userId]);
        res.json({ message: 'Password updated successfully' });
    }
    catch (error) {
        serverErrorResponse(res, error);
    }
}));
// Upload avatar
router.post('/upload-avatar', auth_1.authMiddleware, upload.single('avatar'), (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    if (!req.file) {
        return res.status(400).json({ message: 'No file uploaded' });
    }
    try {
        const userId = req.user.id;
        const profilePictureUrl = `/uploads/${req.file.filename}`;
        yield server_1.default.query('UPDATE users SET profile_picture_url = $1 WHERE id = $2', [profilePictureUrl, userId]);
        res.json({ profilePictureUrl });
    }
    catch (error) {
        serverErrorResponse(res, error);
    }
}));
// Admin middleware
const isAdmin = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    try {
        const userId = req.user.id;
        const result = yield server_1.default.query('SELECT r.name FROM users u JOIN roles r ON u.role_id = r.id WHERE u.id = $1', [userId]);
        if (['site_admin', 'application_admin'].includes((_a = result.rows[0]) === null || _a === void 0 ? void 0 : _a.name)) {
            next();
        }
        else {
            res.status(403).json({ message: 'Access denied' });
        }
    }
    catch (error) {
        serverErrorResponse(res, error);
    }
});
// Get all users (admin only)
router.get('/users', auth_1.authMiddleware, isAdmin, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const result = yield server_1.default.query(`
      SELECT u.id, u.username, u.email, r.name as role, u.is_active 
      FROM users u 
      JOIN roles r ON u.role_id = r.id
    `);
        res.json(result.rows);
    }
    catch (error) {
        console.error('Error fetching users:', error);
        res.status(500).json({ message: 'Failed to fetch users' });
    }
}));
// Update user role (admin only)
router.put('/users/:id/role', auth_1.authMiddleware, isAdmin, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { id } = req.params;
    const { role } = req.body;
    try {
        const validRoles = ['user', 'application_admin', 'site_admin'];
        if (!validRoles.includes(role)) {
            return res.status(400).json({ message: 'Invalid role' });
        }
        const roleResult = yield server_1.default.query('SELECT id FROM roles WHERE name = $1', [role]);
        if (roleResult.rows.length === 0) {
            return res.status(400).json({ message: 'Invalid role' });
        }
        const roleId = roleResult.rows[0].id;
        yield server_1.default.query('UPDATE users SET role_id = $1 WHERE id = $2', [roleId, id]);
        res.json({ message: 'User role updated successfully' });
    }
    catch (error) {
        serverErrorResponse(res, error);
    }
}));
// Delete user (admin only)
router.delete('/users/:id', auth_1.authMiddleware, isAdmin, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { id } = req.params;
    try {
        // Check if the user exists
        const userResult = yield server_1.default.query('SELECT * FROM users WHERE id = $1', [id]);
        if (userResult.rows.length === 0) {
            return res.status(404).json({ message: 'User not found' });
        }
        // Delete the user
        yield server_1.default.query('DELETE FROM users WHERE id = $1', [id]);
        res.json({ message: 'User deleted successfully' });
    }
    catch (error) {
        serverErrorResponse(res, error);
    }
}));
router.put('/users/:id/status', auth_1.authMiddleware, isAdmin, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { id } = req.params;
    const { is_active } = req.body;
    if (typeof is_active !== 'boolean') {
        return res.status(400).json({ message: 'Invalid status value' });
    }
    try {
        const result = yield server_1.default.query('UPDATE users SET is_active = $1 WHERE id = $2 RETURNING id, username, email, is_active', [is_active, id]);
        if (result.rows.length === 0) {
            return res.status(404).json({ message: 'User not found' });
        }
        res.json({
            message: `User ${is_active ? 'enabled' : 'disabled'} successfully`,
            user: result.rows[0]
        });
    }
    catch (error) {
        console.error('Error updating user status:', error);
        res.status(500).json({ message: 'Failed to update user status' });
    }
}));
router.put('/users/:id/status', auth_1.authMiddleware, isAdmin, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const { id } = req.params;
    const { is_active } = req.body;
    try {
        yield server_1.default.query('UPDATE users SET is_active = $1 WHERE id = $2', [is_active, id]);
        res.json({ message: 'User status updated successfully' });
    }
    catch (error) {
        serverErrorResponse(res, error);
    }
}));
exports.default = router;

================
File: services/auth/dist/server.js
================
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const auth_1 = __importDefault(require("./routes/auth"));
const path_1 = __importDefault(require("path"));
const pg_1 = require("pg");
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config({ path: path_1.default.resolve(__dirname, '../../../.env') });
const app = (0, express_1.default)();
const PORT = process.env.PORT || 3001;
app.use((0, cors_1.default)({
    origin: process.env.FRONTEND_URL || 'http://localhost:3000',
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization'],
}));
app.use(express_1.default.json());
app.use('/auth', auth_1.default);
const server = app.listen(PORT, () => {
    console.log(`Auth service running on port ${PORT}`);
});
const pool = new pg_1.Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD ? String(process.env.DB_PASSWORD) : undefined,
    port: parseInt(process.env.DB_PORT || '5432'),
    options: '-c search_path=newcloud_schema,public'
});
const uploadDir = path_1.default.join(__dirname, '..', 'uploads');
app.use('/uploads', express_1.default.static(uploadDir));
// Use auth routes
app.use('/auth', auth_1.default);
pool.on('error', (err) => {
    console.error('Unexpected error on idle client', err);
});
// Test database connection
pool.query('SELECT NOW()', (err, res) => {
    if (err) {
        console.error('Error connecting to the database:', err);
    }
    else {
        console.log('Successfully connected to the database');
    }
});
console.log('Database connection details:');
console.log('DB_USER:', process.env.DB_USER);
console.log('DB_HOST:', process.env.DB_HOST);
console.log('DB_NAME:', process.env.DB_NAME);
console.log('DB_PASSWORD is set:', !!process.env.DB_PASSWORD);
console.log('DB_PORT:', process.env.DB_PORT);
exports.default = pool;

================
File: services/auth/Dockerfile
================
FROM node:22

WORKDIR /usr/src/app

# Copy package.json and package-lock.json from the parent directory
COPY services/auth/package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the auth service code
COPY services/auth .

# Typescript is a devDependency, so we need to install it for the build
RUN npm install typescript@latest

# Build the app
RUN npm run build

EXPOSE 3001

# Run the compiled JavaScript
CMD ["node", "dist/server.js"]

RUN mkdir -p /usr/src/app/uploads && chmod 775 /usr/src/app/uploads

================
File: services/auth/manual-migration.js
================
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: parseInt(process.env.DB_PORT || '5432'),
});

async function addProfilePictureColumn() {
  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // Set search_path
    await client.query('SET search_path TO newcloud_schema, public');

    // Check if the column already exists
    const checkColumnQuery = `
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_schema = 'newcloud_schema' 
      AND table_name = 'users' 
      AND column_name = 'profile_picture_url'
    `;
    const checkResult = await client.query(checkColumnQuery);

    if (checkResult.rows.length === 0) {
      // Add the column if it doesn't exist
      await client.query(`
        ALTER TABLE users 
        ADD COLUMN profile_picture_url VARCHAR(255)
      `);
      console.log('Added profile_picture_url column');

      // Set default value for existing rows
      await client.query(`
        UPDATE users 
        SET profile_picture_url = '/default-avatar.png' 
        WHERE profile_picture_url IS NULL
      `);
      console.log('Set default value for profile_picture_url');
    } else {
      console.log('profile_picture_url column already exists');
    }

    await client.query('COMMIT');
    console.log('Migration completed successfully');
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('Error during migration:', err);
  } finally {
    client.release();
    await pool.end();
  }
}

addProfilePictureColumn();

================
File: services/auth/migrations/20240311120000_add_profile_picture_url.sql
================
-- In each migration file (e.g., 20240311120000_add_profile_picture_url.sql)
SET search_path TO newcloud_schema, public;

-- Your existing migration SQL follows...
ALTER TABLE users
ADD COLUMN profile_picture_url VARCHAR(255);

UPDATE users SET profile_picture_url = '/default-avatar.png' WHERE profile_picture_url IS NULL;

================
File: services/auth/package.json
================
{
  "name": "new-cloud-client",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "start": "node dist/server.ts",
    "dev": "nodemon src/server.ts",
    "build": "tsc",
    "watch": "tsc -w",
    "stop": "node dist/server.ts",
    "migrate": "node -r dotenv/config ./node_modules/.bin/node-pg-migrate",
    "migrate:up": "node-pg-migrate up",
    "migrate:down": "node-pg-migrate down"
  },
  "engines": {
    "node": "20.17.0"
  },
  "dependencies": {
    "@heroicons/react": "^2.1.5",
    "@tanstack/react-query": "^4.29.5",
    "axios": "^1.7.7",
    "babel": "^7.25.0",
    "bcrypt": "^5.1.1",
    "cors": "^2.8.5",
    "dotenv": "16.4.5",
    "express": "4.21.0",
    "jsonwebtoken": "^9.0.2",
    "multer": "^1.4.5-lts.1",
    "new-cloud-client": "file:",
    "pg": "^8.12.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@babel/eslint-parser": "^7.22.5",
    "@babel/preset-env": "^7.22.5",
    "@babel/preset-react": "^7.22.5",
    "@babel/preset-typescript": "^7.22.5",
    "@testing-library/jest-dom": "^6.5.0",
    "@testing-library/react": "^14.0.0",
    "@types/babel__core": "^7.20.5",
    "@types/babel__generator": "^7.6.8",
    "@types/babel__template": "^7.4.4",
    "@types/babel__traverse": "^7.20.6",
    "@types/bcrypt": "^5.0.2",
    "@types/cors": "^2.8.17",
    "@types/express": "^4.17.21",
    "@types/json-schema": "^7.0.15",
    "@types/jsonwebtoken": "^9.0.6",
    "@types/multer": "^1.4.12",
    "@types/node": "^22.5.4",
    "@types/pg": "^8.11.9",
    "@types/react": "^18.2.6",
    "@types/react-dom": "^18.2.4",
    "autoprefixer": "^10.4.14",
    "babel": "^6.23.0",
    "eslint": "^8.40.0",
    "eslint-config-next": "^14.2.8",
    "express": "4.21.0",
    "jest": "^29.5.0",
    "nodemon": "3.1.4",
    "postcss": "^8.4.23",
    "tailwindcss": "^3.3.2",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.6.2"
  }
}

================
File: services/auth/run-migration.js
================
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: parseInt(process.env.DB_PORT || '5432'),
});

async function verifyAndCreateSchema() {
  const client = await pool.connect();
  try {
    console.log('Successfully connected to the database');

    // Check search_path
    const searchPathResult = await client.query('SHOW search_path');
    console.log('Current search_path:', searchPathResult.rows[0].search_path);

    // List all schemas
    const allSchemasResult = await client.query(`
      SELECT schema_name 
      FROM information_schema.schemata 
      WHERE schema_name NOT LIKE 'pg_%' AND schema_name != 'information_schema'
    `);
    console.log('Available schemas:', allSchemasResult.rows.map(row => row.schema_name));

    // Check if the schema exists
    const schemaResult = await client.query(`
      SELECT schema_name 
      FROM information_schema.schemata 
      WHERE schema_name = 'newcloud_schema'
    `);
    
    if (schemaResult.rows.length > 0) {
      console.log('newcloud_schema exists');
    } else {
      console.log('newcloud_schema does not exist, attempting to create...');
      await client.query('CREATE SCHEMA IF NOT EXISTS newcloud_schema');
      console.log('newcloud_schema created');
    }

    // Set search_path to include newcloud_schema
    await client.query('SET search_path TO newcloud_schema, public');
    console.log('Set search_path to include newcloud_schema');

    // Check user permissions
    const permissionsResult = await client.query(`
      SELECT has_schema_privilege('${process.env.DB_USER}', 'newcloud_schema', 'CREATE')
    `);
    console.log('User has CREATE permission on newcloud_schema:', permissionsResult.rows[0].has_schema_privilege);

  } catch (err) {
    console.error('Error:', err);
  } finally {
    client.release();
    await pool.end();
  }
}

verifyAndCreateSchema();

================
File: services/auth/src/auth.ts
================
import jwt from 'jsonwebtoken';
import { Request, Response, NextFunction } from 'express';

const JWT_SECRET = process.env.JWT_SECRET || 'test@69lol';

interface User {
  id: string;
  username: string;
}

interface JwtPayload {
  id: string;
  username: string;
}

export function generateToken(user: User): string {
  return jwt.sign({ id: user.id, username: user.username }, JWT_SECRET, { expiresIn: '1d' });
}

export function authMiddleware(req: Request, res: Response, next: NextFunction) {
  const token = req.headers.authorization?.split(' ')[1];

  if (!token) {
    return res.status(401).json({ message: 'No token provided' });
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as JwtPayload;
    (req as any).user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ message: 'Invalid token' });
  }
}

================
File: services/auth/src/routes/auth.ts
================
// services/auth/src/routes/auth.ts

import express from 'express';
import bcrypt from 'bcrypt';
import { generateToken, authMiddleware } from '../auth';
import pool from '../server';
import multer from 'multer';
import path from 'path';
import fs from 'fs';

const router = express.Router();

// File upload configuration
const uploadDir = path.join(__dirname, '..', 'uploads');
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, uploadDir),
  filename: (req, file, cb) => {
    const uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1E9)}`;
    cb(null, `${file.fieldname}-${uniqueSuffix}${path.extname(file.originalname)}`);
  }
});
const upload = multer({ storage });

// Ensure upload directory exists
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

// Helper function for server error responses
const serverErrorResponse = (res: express.Response, error: any) => {
  console.error('Server error:', error);
  res.status(500).json({ message: 'Internal server error' });
};

// User registration
router.post('/register', async (req, res) => {
  const { username, email, password, firstName, lastName, timezone } = req.body;

  if (!username || !password || !firstName || !lastName) {
    return res.status(400).json({ message: 'Username, password, first name, and last name are required' });
  }

  try {
    // Check if user already exists
    const userExists = await pool.query('SELECT * FROM newcloud_schema.users WHERE username = $1 OR email = $2', [username, email]);
    if (userExists.rows.length > 0) {
      return res.status(400).json({ message: 'Username or email already in use' });
    }

    // Hash password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Get the 'user' role id
    const roleResult = await pool.query('SELECT id FROM newcloud_schema.roles WHERE name = $1', ['user']);
    if (roleResult.rows.length === 0) {
      return res.status(500).json({ message: 'Default role not found' });
    }
    const roleId = roleResult.rows[0].id;

    // Insert new user
    const newUser = await pool.query(
      'INSERT INTO newcloud_schema.users (username, email, password, first_name, last_name, timezone, role_id) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, username',
      [username, email, hashedPassword, firstName, lastName, timezone || 'America/Boise', roleId]
    );

    const token = generateToken({ id: newUser.rows[0].id, username: newUser.rows[0].username });
    res.status(201).json({ token });
  } catch (error) {
    serverErrorResponse(res, error);
  }
});


// User login
router.post('/login', async (req, res) => {
  const { username, password } = req.body;

  try {
    const user = await pool.query('SELECT * FROM users WHERE username = $1', [username]);

    if (user.rows.length === 0) {
      return res.status(400).json({ message: 'Invalid username or password' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.rows[0].password);
    if (!isPasswordValid) {
      return res.status(400).json({ message: 'Invalid username or password' });
    }

    if (!user.rows[0].is_active) {
      return res.status(403).json({ message: 'Your account has been disabled. Please contact an administrator.' });
    }

    const token = generateToken({ id: user.rows[0].id, username: user.rows[0].username });
    res.json({ token });
  } catch (error) {
    serverErrorResponse(res, error);
  }
});

// Get user profile
router.get('/profile', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).user.id;
    const result = await pool.query(
      'SELECT u.id, u.username, u.email, u.first_name, u.last_name, u.timezone, r.name as role FROM users u JOIN roles r ON u.role_id = r.id WHERE u.id = $1',
      [userId]
    );
    
    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.json(result.rows[0]);
  } catch (error) {
    serverErrorResponse(res, error);
  }
});

// Update user profile
router.put('/profile', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).user.id;
    const { first_name, last_name, email, timezone } = req.body;

    console.log('Received profile update request:', req.body);

    const result = await pool.query(
      'UPDATE users SET first_name = $1, last_name = $2, email = $3, timezone = $4 WHERE id = $5 RETURNING id, username, email, first_name, last_name, timezone',
      [first_name || '', last_name || '', email, timezone, userId]
    );

    if (result.rows.length === 0) {
      console.log('User not found for update');
      return res.status(404).json({ message: 'User not found' });
    }

    console.log('Updated user:', result.rows[0]);
    res.json(result.rows[0]);
  } catch (error) {
    console.error('Error updating profile:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});
// Change password
router.put('/change-password', authMiddleware, async (req, res) => {
  try {
    const userId = (req as any).user.id;
    const { currentPassword, newPassword } = req.body;

    const user = await pool.query('SELECT * FROM users WHERE id = $1', [userId]);
    if (user.rows.length === 0) {
      return res.status(404).json({ message: 'User not found' });
    }

    if (!(await bcrypt.compare(currentPassword, user.rows[0].password))) {
      return res.status(400).json({ message: 'Current password is incorrect' });
    }

    const salt = await bcrypt.genSalt(10);
    const hashedNewPassword = await bcrypt.hash(newPassword, salt);

    await pool.query('UPDATE users SET password = $1 WHERE id = $2', [hashedNewPassword, userId]);

    res.json({ message: 'Password updated successfully' });
  } catch (error) {
    serverErrorResponse(res, error);
  }
});

// Upload avatar
router.post('/upload-avatar', authMiddleware, upload.single('avatar'), async (req, res) => {
  if (!req.file) {
    return res.status(400).json({ message: 'No file uploaded' });
  }

  try {
    const userId = (req as any).user.id;
    const profilePictureUrl = `/uploads/${req.file.filename}`;
    
    await pool.query('UPDATE users SET profile_picture_url = $1 WHERE id = $2', [profilePictureUrl, userId]);
    
    res.json({ profilePictureUrl });
  } catch (error) {
    serverErrorResponse(res, error);
  }
});

// Admin middleware
const isAdmin = async (req: any, res: express.Response, next: express.NextFunction) => {
  try {
    const userId = req.user.id;
    const result = await pool.query(
      'SELECT r.name FROM users u JOIN roles r ON u.role_id = r.id WHERE u.id = $1',
      [userId]
    );
    if (['site_admin', 'application_admin'].includes(result.rows[0]?.name)) {
      next();
    } else {
      res.status(403).json({ message: 'Access denied' });
    }
  } catch (error) {
    serverErrorResponse(res, error);
  }
};

// Get all users (admin only)
router.get('/users', authMiddleware, isAdmin, async (req, res) => {
  try {
    const result = await pool.query(`
      SELECT u.id, u.username, u.email, r.name as role, u.is_active 
      FROM users u 
      JOIN roles r ON u.role_id = r.id
    `);
    res.json(result.rows);
  } catch (error) {
    console.error('Error fetching users:', error);
    res.status(500).json({ message: 'Failed to fetch users' });
  }
});

// Update user role (admin only)
router.put('/users/:id/role', authMiddleware, isAdmin, async (req, res) => {
  const { id } = req.params;
  const { role } = req.body;

  try {
    const validRoles = ['user', 'application_admin', 'site_admin'];
    if (!validRoles.includes(role)) {
      return res.status(400).json({ message: 'Invalid role' });
    }

    const roleResult = await pool.query('SELECT id FROM roles WHERE name = $1', [role]);
    if (roleResult.rows.length === 0) {
      return res.status(400).json({ message: 'Invalid role' });
    }

    const roleId = roleResult.rows[0].id;
    await pool.query('UPDATE users SET role_id = $1 WHERE id = $2', [roleId, id]);
    res.json({ message: 'User role updated successfully' });
  } catch (error) {
    serverErrorResponse(res, error);
  }
});

// Delete user (admin only)
router.delete('/users/:id', authMiddleware, isAdmin, async (req, res) => {
  const { id } = req.params;

  try {
    // Check if the user exists
    const userResult = await pool.query('SELECT * FROM users WHERE id = $1', [id]);
    if (userResult.rows.length === 0) {
      return res.status(404).json({ message: 'User not found' });
    }

    // Delete the user
    await pool.query('DELETE FROM users WHERE id = $1', [id]);
    res.json({ message: 'User deleted successfully' });
  } catch (error) {
    serverErrorResponse(res, error);
  }
});

router.put('/users/:id/status', authMiddleware, isAdmin, async (req, res) => {
  const { id } = req.params;
  const { is_active } = req.body;

  if (typeof is_active !== 'boolean') {
    return res.status(400).json({ message: 'Invalid status value' });
  }

  try {
    const result = await pool.query(
      'UPDATE users SET is_active = $1 WHERE id = $2 RETURNING id, username, email, is_active',
      [is_active, id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.json({
      message: `User ${is_active ? 'enabled' : 'disabled'} successfully`,
      user: result.rows[0]
    });
  } catch (error) {
    console.error('Error updating user status:', error);
    res.status(500).json({ message: 'Failed to update user status' });
  }
});

router.put('/users/:id/status', authMiddleware, isAdmin, async (req, res) => {
  const { id } = req.params;
  const { is_active } = req.body;

  try {
    await pool.query('UPDATE users SET is_active = $1 WHERE id = $2', [is_active, id]);
    res.json({ message: 'User status updated successfully' });
  } catch (error) {
    serverErrorResponse(res, error);
  }
});

export default router;

================
File: services/auth/src/server.ts
================
import express from 'express';
import cors from 'cors';
import authRoutes from './routes/auth';
import path from 'path';
import { Pool } from 'pg';
import dotenv from 'dotenv';

dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

const app = express();
const PORT = process.env.PORT || 3001;



app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
}));

app.use(express.json());

app.use('/auth', authRoutes);

const server = app.listen(PORT, () => {
  console.log(`Auth service running on port ${PORT}`);
});

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD ? String(process.env.DB_PASSWORD) : undefined,
  port: parseInt(process.env.DB_PORT || '5432'),
  options: '-c search_path=newcloud_schema,public'
});

const uploadDir = path.join(__dirname, '..', 'uploads');
app.use('/uploads', express.static(uploadDir));

// Use auth routes
app.use('/auth', authRoutes);

pool.on('error', (err) => {
  console.error('Unexpected error on idle client', err);
});

// Test database connection
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('Error connecting to the database:', err);
  } else {
    console.log('Successfully connected to the database');
  }
});

console.log('Database connection details:');
console.log('DB_USER:', process.env.DB_USER);
console.log('DB_HOST:', process.env.DB_HOST);
console.log('DB_NAME:', process.env.DB_NAME);
console.log('DB_PASSWORD is set:', !!process.env.DB_PASSWORD);
console.log('DB_PORT:', process.env.DB_PORT);

export default pool;

================
File: services/auth/test-db-connection.js
================
const path = require('path');
require('dotenv').config();
const migrate = require('node-pg-migrate').default;

const dbConfig = {
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME,
};

const databaseUrl = `postgres://${dbConfig.user}:${encodeURIComponent(dbConfig.password)}@${dbConfig.host}:${dbConfig.port}/${dbConfig.database}?search_path=newcloud_schema,public`;

async function runMigration() {
  try {
    await migrate({
      databaseUrl: databaseUrl,
      schema: 'newcloud_schema',
      migrationsTable: 'pgmigrations',
      dir: 'migrations',
      direction: 'up',
      count: Infinity,
    });
    console.log('Migration completed successfully');
  } catch (error) {
    console.error('Migration failed:', error);
  }
}

runMigration();

================
File: services/auth/tsconfig.json
================
{
    "compilerOptions": {
      "target": "es6",
      "module": "commonjs",
      "outDir": "./dist",
      "rootDir": "./src",
      "strict": true,
      "esModuleInterop": true,
      "skipLibCheck": true,
      "forceConsistentCasingInFileNames": true,
      "resolveJsonModule": true,
      "typeRoots": ["./node_modules/@types", "./src/types"],
      "moduleResolution": "node"
    },
    "include": ["src/**/*", "src/server.ts"],
    "exclude": ["node_modules"]
  }
